module(
    name = "proto_lake_{lakeName}",
    version = "1.0.0",
)

# Bazel dependencies - versions from lake configuration
bazel_dep(name = "bazel_skylib", version = "1.8.1")
bazel_dep(name = "rules_java", version = "{rules_java_version}")
bazel_dep(name = "rules_python", version = "{rules_python_version}")
bazel_dep(name = "rules_pkg", version = "1.0.1")
bazel_dep(name = "platforms", version = "1.0.0")

# gRPC code generation rules
bazel_dep(name = "rules_proto_grpc", version = "{rules_proto_grpc_version}")
bazel_dep(name = "rules_proto_grpc_java", version = "{rules_proto_grpc_version}")
bazel_dep(name = "rules_proto_grpc_python", version = "{rules_proto_grpc_version}")
bazel_dep(name = "rules_proto_grpc_js", version = "{rules_proto_grpc_version}")

# JavaScript support
bazel_dep(name = "aspect_rules_js", version = "2.3.8")

# Proto Lake Gazelle extension for service bundle generation
bazel_dep(name = "protolake_gazelle", version = "0.0.1")

# Configure protolake-gazelle source
# Option 1: Use git repository (recommended for production)
{#if protolake_gazelle_git_url}
git_override(
    module_name = "protolake_gazelle",
    remote = "{protolake_gazelle_git_url}",
    commit = "{protolake_gazelle_git_commit}",
)
{#else}
# Option 2: Use local path (for development)
local_path_override(
    module_name = "protolake_gazelle",
    path = "{protolake_gazelle_path}",
)
{/if}

# Protobuf - use the configured version
bazel_dep(name = "protobuf", version = "{protobuf_version}", repo_name = "com_google_protobuf")

# Rules Proto - commented out as it's not needed in Bazel 8
# Proto support is now built-in to Bazel 8
# bazel_dep(name = "rules_proto", version = "7.1.0")

# Gazelle for BUILD file generation
bazel_dep(name = "gazelle", version = "0.44.0", repo_name = "bazel_gazelle")

# Rules Go needed by Gazelle (even for proto-only usage)
bazel_dep(name = "rules_go", version = "0.55.1", repo_name = "io_bazel_rules_go")

# Configure Go SDK (required by Gazelle)
go_sdk = use_extension("@io_bazel_rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = "1.23.3")

# Configure Python toolchain
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    python_version = "3.11",
)
use_repo(python, "python_3_11")

# Java dependencies for gRPC and Protobuf, managed by rules_jvm_external
bazel_dep(name = "rules_jvm_external", version = "6.8")
maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.install(
    artifacts = [
        "com.google.protobuf:protobuf-java:{protobuf_java_version}",
        "io.grpc:grpc-api:{grpc_java_version}",
        "io.grpc:grpc-stub:{grpc_java_version}",
        "io.grpc:grpc-protobuf:{grpc_java_version}",
        "io.grpc:grpc-netty-shaded:{grpc_java_version}",
    ],
    repositories = [
        "https://repo1.maven.org/maven2",
    ],
)
use_repo(maven, "maven")

# Configure npm for rules_proto_grpc_js internal dependencies
npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm")
use_repo(npm, "rules_proto_grpc_js_npm")

# Note: In Bazel 8, proto_lang extension is no longer needed
# Proto toolchains are configured automatically by the protobuf module