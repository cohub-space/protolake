// lake.proto
syntax = "proto3";

package protolake.v1;

import "google/longrunning/operations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option java_multiple_files = true;
option java_package = "protolake.v1";
option java_outer_classname = "LakeProto";

// Lake management service
// A Lake represents a collection of proto bundles (like a monorepo for protos)
service LakeService {
  // Create a new lake
  rpc CreateLake(CreateLakeRequest) returns (Lake);

  // Get lake details
  rpc GetLake(GetLakeRequest) returns (Lake);

  // List all lakes
  rpc ListLakes(ListLakesRequest) returns (ListLakesResponse);

  // Update lake configuration
  rpc UpdateLake(UpdateLakeRequest) returns (Lake);

  // Delete a lake (does not delete git repo, just removes from protolake)
  rpc DeleteLake(DeleteLakeRequest) returns (google.protobuf.Empty);

  // Build all bundles in the lake
  // Returns a long-running operation that tracks build progress
  rpc BuildLake(BuildLakeRequest) returns (google.longrunning.Operation);

  // Refresh lakes from filesystem
  // Discovers lakes and bundles by scanning for lake.yaml and bundle.yaml files
  rpc RefreshLakes(RefreshLakesRequest) returns (RefreshLakesResponse);
}

// A Lake is a collection of proto bundles with shared configuration
// Typically maps to a single git repository containing all proto definitions
message Lake {
  // Unique identifier (e.g., "my-company-protos")
  // This becomes the directory name and reference key
  string name = 1;

  // Human-readable display name (e.g., "My Company Proto Definitions")
  string display_name = 2;

  // Optional description for documentation
  string description = 3;

  // Lake configuration that controls build behavior
  // This configuration is inherited by all bundles in the lake
  LakeConfig config = 4;

  // Automatically set by the system
  google.protobuf.Timestamp create_time = 5;
  google.protobuf.Timestamp update_time = 6;
  
  // Path prefix from base workspace to the lake directory
  // For example: "z/y" means the lake is at {base_workspace}/z/y/{name}/
  // If empty, lake is directly under base workspace
  string lake_prefix = 7;
}

// Lake configuration controls how protolake builds all bundles
// These settings provide defaults that individual bundles can override
message LakeConfig {
  // Controls the MODULE.bazel generation for Bazel builds
  // This defines which versions of protoc, gRPC, etc. are used
  ModuleBazelConfig module_bazel = 1;

  // Default language settings inherited by all bundles
  // Individual bundles can override these settings
  LanguageDefaults language_defaults = 2;

  // Build behavior configuration
  BuildDefaults build_defaults = 3;

  // Validation configuration using buf
  ValidationConfig validation = 4;

  // Organization name for package naming
  // Used to generate default package names across languages
  string organization = 5;
}

// Controls MODULE.bazel generation for the entire protolake
// This ensures consistent protoc/gRPC versions across all builds
message ModuleBazelConfig {
  // Protobuf version to use (e.g., "27.0")
  // This version is used by protoc to compile .proto files
  string protobuf_version = 1;

  // gRPC version for RPC code generation (e.g., "1.64.0")
  string grpc_version = 2;

  // rules_proto_grpc version for Bazel rules (e.g., "5.0.0")
  string rules_proto_grpc_version = 3;

  // Additional Bazel modules that might be needed
  // For example, specific language rules or custom plugins
  repeated BazelModule additional_modules = 4;
}

// Additional Bazel module dependency
message BazelModule {
  // Module name in Bazel Central Registry (e.g., "rules_go")
  string name = 1;

  // Module version (e.g., "0.46.0")
  string version = 2;

  // Optional: specific registry if not using BCR
  string registry_url = 3;
}

// Language-specific defaults inherited by all bundles in the lake
// These control how packages are built and published for each language
message LanguageDefaults {
  // Java/Maven configuration
  JavaDefaults java = 1;

  // Python/PyPI configuration
  PythonDefaults python = 2;

  // JavaScript/npm configuration
  JavaScriptDefaults javascript = 3;

  // Go module configuration
  GoDefaults go = 4;
}

// Java-specific build configuration
// Controls Maven artifact generation and packaging
message JavaDefaults {
  // Whether to build Java artifacts by default
  bool enabled = 1;

  // Maven coordinates
  string group_id = 2;        // e.g., "com.company.proto"

  // Java source compatibility version (e.g., "11", "17")
  // This sets the -source flag in javac
  string source_version = 3;

  // Java target compatibility version (e.g., "8", "11")
  // This sets the -target flag in javac
  // Often set lower than source for backward compatibility
  string target_version = 4;

  // IMPORTANT: These versions must be compatible with MODULE.bazel versions
  // protoc 27.0 requires protobuf-java 4.27.x
  string protobuf_java_version = 5;  // e.g., "4.27.0"

  // gRPC Java version must match gRPC version in MODULE.bazel
  string grpc_java_version = 6;      // e.g., "1.64.0"

  // Additional Maven dependencies to include in generated pom.xml
  repeated MavenDependency additional_dependencies = 7;

  // Proto compilation options
  bool java_multiple_files = 8;      // Generate separate .java file per message
  string java_outer_classname_suffix = 9;  // e.g., "Proto"
}

// Maven dependency specification
message MavenDependency {
  string group_id = 1;
  string artifact_id = 2;
  string version = 3;
  string scope = 4;  // e.g., "compile", "provided"
}

// Python-specific build configuration
// Controls wheel generation and PyPI packaging
message PythonDefaults {
  // Whether to build Python packages by default
  bool enabled = 1;

  // PyPI package settings
  string package_prefix = 2;   // e.g., "company_proto"
  string python_version = 3;   // e.g., ">=3.8,<4.0"

  // IMPORTANT: Version compatibility with MODULE.bazel
  string protobuf_version = 4;  // e.g., "5.27.0"
  string grpcio_version = 5;    // e.g., "1.64.0"

  // Additional pip dependencies for setup.py
  repeated string additional_dependencies = 6;

  // Python-specific options
  string stub_type = 7;  // "pyi" or "inline"
}

// JavaScript-specific build configuration
// Controls npm package generation
message JavaScriptDefaults {
  // Whether to build JavaScript packages by default
  bool enabled = 1;

  // npm package settings
  string package_scope = 2;    // e.g., "@company"
  string node_version = 3;     // e.g., ">=18"

  // JavaScript protobuf runtime versions
  string google_protobuf_version = 4;  // e.g., "3.21.2"
  string grpc_web_version = 5;         // e.g., "1.5.0"

  // Package type
  bool use_typescript = 6;     // Generate .d.ts files
  string module_type = 7;      // "commonjs" or "esm"

  // Additional npm dependencies to include in package.json
  repeated NpmDependency additional_dependencies = 8;
}

// npm dependency specification
message NpmDependency {
  // Package name (e.g., "@types/node", "react")
  string name = 1;

  // Version range (e.g., "^20.0.0", "~18.2.0")
  string version = 2;

  // Whether this is a devDependency vs regular dependency
  bool dev_dependency = 3;
}

// Go-specific build configuration
message GoDefaults {
  // Whether to build Go packages by default
  bool enabled = 1;

  // Go module settings
  string module_prefix = 2;    // e.g., "github.com/company/proto"
  string go_version = 3;       // e.g., "1.21"
}

// Build behavior configuration
message BuildDefaults {
  // Automatically publish to local repositories after successful build
  // For Maven: ~/.m2/repository
  // For Python: pip install -e
  // For npm: npm link
  bool auto_publish_local = 1;

  // Base version for all bundles
  // Local builds append branch name: "1.0.0" -> "1.0.0-feature-x"
  // Remote builds use clean versions: "1.0.0"
  string base_version = 2;
}

// Validation configuration
// We delegate to buf for proto validation and linting
message ValidationConfig {
  // Path to buf.yaml relative to lake root
  // If not specified, defaults to "./buf.yaml"
  // If buf.yaml doesn't exist, validation is skipped
  string buf_config_path = 1;
}

// Request/Response messages

message CreateLakeRequest {
  // The lake to create
  Lake lake = 1;

  // If true, automatically configure based on directory structure
  // Scans for .proto files and creates sensible defaults
  bool auto_configure = 2;
}

message GetLakeRequest {
  // Lake name to retrieve
  string name = 1;
}

message ListLakesRequest {
  // Maximum number of results to return (0 = no limit)
  int32 page_size = 1;

  // Token from previous response for pagination
  string page_token = 2;
}

message ListLakesResponse {
  // List of lakes
  repeated Lake lakes = 1;

  // Token for next page (empty if no more results)
  string next_page_token = 2;
}

message UpdateLakeRequest {
  // Updated lake configuration
  Lake lake = 1;

  // Only update specified field paths
  // e.g., ["config.language_defaults.java.source_version"]
  repeated string update_paths = 2;
}

message DeleteLakeRequest {
  // Lake name to delete
  string name = 1;
  
  // Delete options
  // If true: delete entire lake directory including all files
  // If false: delete only protolake files (lake.yaml, bundle.yaml) - default
  bool delete_filesystem = 2;
}

// Build operations
message BuildLakeRequest {
  // Lake to build
  string name = 1;

  // Optional: only build specific bundles
  // If empty, builds all bundles in the lake
  repeated string bundle_names = 2;

  // NOTE: We always build the current git branch
  // No branch switching to keep things simple

  // Optional: Configure which pipeline steps to run
  // If not specified, runs all steps
  BuildPipelineConfig pipeline_config = 3;
}

// Configuration for which build pipeline steps to run
message BuildPipelineConfig {
  // Configuration for Gazelle step
  RunGazelleConfig gazelle = 1;

  // Configuration for validation step
  RunValidationConfig validation = 2;

  // Configuration for Bazel build step
  RunBuildConfig build = 3;

  // Configuration for publishing step
  RunPublishConfig publish = 4;
}

// Gazelle configuration
message RunGazelleConfig {
  // Whether to run Gazelle at all
  bool enabled = 1;
}

// Build configuration
message RunBuildConfig {
  // Whether to run build at all
  bool enabled = 1;

  // Clean before building
  bool clean = 2;  // Default: false
  
  // Whether to keep going on failures
  bool keep_going = 3;  // Default: false
  
  // Build bundles individually instead of all at once
  // When true: Query for bundle targets and build each separately
  // When false: Build target directly (e.g., //... for lake builds)
  bool isolate_bundle_builds = 4;  // Default: false
}

// Publishing configuration
message RunPublishConfig {
  // Whether to publish at all
  bool enabled = 1;
}

// Validation configuration
// We delegate to buf for proto validation and linting
message RunValidationConfig {
  // Whether to run validation at all
  bool enabled = 1;

  // Which validation checks to perform
  ValidationChecks checks = 2;
}

message ValidationChecks {
  // Run buf build to verify compilation
  bool compilation = 1;  // Default: true

  // Run buf lint
  bool lint = 2;  // Default: true

  // Run buf breaking
  bool breaking = 3;  // Default: true in STRICT mode, false in FORCE

  // Run buf format --diff (check formatting)
  bool format = 4;  // Default: false (opt-in)

  // Future: custom validation plugins
}

// =============================================================================
// UNIFIED OPERATION METADATA AND RESPONSE STRUCTURES
// =============================================================================

// Metadata returned in Operation.metadata during any build operation
// This unified structure is used for both lake and bundle builds
// This metadata serves as BOTH the Operation.metadata and, once complete, is wrapped to produce the operation.response
message BuildOperationMetadata {
  // this could be either a lake or bundle resource name
  string resource_name = 1;

  // The requested target being built
  // For lake: "//..." 
  // For bundle: "//bundles/my-bundle:all"
  string requested_target = 2;
  
  // Current git branch
  string branch = 3;
  
  // Start time of the entire operation
  google.protobuf.Timestamp start_time = 4;
  
  // Current phase of the operation
  OperationPhase current_phase = 5;
  
  // Status of all phases (preserves history)
  PhaseStatuses phase_statuses = 6;
  
  // Map of all discovered targets and their build status
  // Key: target name (e.g., "//bundles/user:all")
  // Value: build information for that target
  map<string, TargetBuildInfo> target_builds = 7;
  
  // Lake being built (for use in build pipeline)
  Lake lake = 8;
}

// Tracks the status of all operation phases
message PhaseStatuses {
  PhaseStatus gazelle = 1;
  PhaseStatus validation = 2;
  PhaseStatus build = 3;
  // Publishing is merged into the build phase
}

// Generic status for any phase of the operation
message PhaseStatus {
  enum Status {
    NOT_STARTED = 0;
    RUNNING = 1;
    SUCCEEDED = 2;
    FAILED = 3;
    SKIPPED = 4;
  }
  
  Status status = 1;
  
  // Human-readable description of current sub-phase
  // e.g., "Running lint checks", "Building target 2 of 5"
  string sub_phase = 2;
  
  google.protobuf.Timestamp start_time = 3;
  google.protobuf.Timestamp end_time = 4;
  
  // Accumulated log lines for this phase
  repeated string log_lines = 5;
  
  // Error message if status = FAILED
  string error_message = 6;
}

// Information about a specific target being built
message TargetBuildInfo {
  // The bazel target (e.g., "//bundles/user:all")
  string target = 1;
  
  enum Status {
    PENDING = 0;      // Discovered but not started
    BUILDING = 1;     // Currently building
    BUILT = 2;        // Build completed successfully
    PUBLISHED = 3;    // Fully complete (build + publish)
    FAILED = 4;       // Build or publish failed
    SKIPPED = 5;      // Skipped due to upstream failure
  }
  
  Status status = 2;
  
  // Version string for this build (e.g., "1.0.0-feature-x")
  string version = 3;
  
  google.protobuf.Timestamp start_time = 4;
  google.protobuf.Timestamp end_time = 5;
  
  // Raw output from bazel build command for this target
  repeated string build_logs = 6;
  
  // Artifacts produced by this target
  // Key: language name (e.g., "JAVA", "PYTHON")
  map<string, Artifact> artifacts = 7;
  
  // High-level error summary from our system (not raw logs)
  // e.g., "Proto compilation failed: undefined symbol 'UserStatus'"
  // This provides a quick error summary without parsing logs
  string error_message = 8;
}

// Information about a published artifact
message Artifact {
  // Language this artifact is for
  Language language = 1;
  
  // Local path where artifact was published
  // e.g., "~/.m2/repository/com/company/proto/my-bundle/1.0.0-feature-x/"
  string local_path = 2;
  
  // Artifact checksum for verification
  string sha256 = 3;
  
  // Size in bytes
  int64 size_bytes = 4;
  
  // Package-specific metadata
  oneof package_coordinate {
    MavenCoordinates maven = 5;
    PythonCoordinates python = 6;
    NpmCoordinates npm = 7;
  }
}

// Maven artifact coordinates
message MavenCoordinates {
  string group_id = 1;
  string artifact_id = 2;
  string version = 3;
  string packaging = 4;   // e.g., "jar"
}

// Python package coordinates
message PythonCoordinates {
  string package_name = 1;
  string version = 2;
}

// npm package coordinates
message NpmCoordinates {
  string package_name = 1;  // includes scope, e.g., "@company/user-service"
  string version = 2;
}

// Go module coordinates
message GoCoordinates {
  string module_path = 1;
  string version = 2;
}

// Final response returned in Operation.response when build completes
message BuildResponse {
  // The complete metadata at end of build
  BuildOperationMetadata metadata = 1;
  
  // Overall status derived from phases and target builds
  enum OverallStatus {
    SUCCEEDED = 0;          // All phases and targets succeeded
    PARTIAL_SUCCESS = 1;    // Some targets failed but others succeeded
    FAILED = 2;             // Critical phase failed or all targets failed
    CANCELLED = 3;          // User cancelled the operation
  }
  
  OverallStatus status = 2;
  
  // Operation completion time
  google.protobuf.Timestamp completion_time = 3;
  
  // Quick summary for UI/API consumers
  BuildSummary summary = 4;
}

message BuildSummary {
  int32 total_targets = 1;
  int32 successful_targets = 2;
  int32 failed_targets = 3;
  int32 skipped_targets = 4;
  
  // Quick list of successfully published artifacts
  // e.g., ["com.company:user-proto:1.0.0-main", "company-user-proto==1.0.0-main"]
  repeated string published_artifacts = 5;
  
  // First error encountered (for quick display)
  string first_error = 6;
}

// Final response returned in Operation.response when build completes
message BuildLakeResponse {
  // Just return the BuildResponse which has all the info
  BuildResponse response = 1;
}

// Supported languages for code generation
enum Language {
  LANGUAGE_UNSPECIFIED = 0;
  JAVA = 1;
  PYTHON = 2;
  JAVASCRIPT = 3;
  GO = 4;
}

// Operation phase enum for tracking build progress
enum OperationPhase {
  OPERATION_PHASE_UNSPECIFIED = 0;
  INITIALIZING = 1;
  RUNNING_GAZELLE = 2;
  VALIDATING = 3;
  BUILDING = 4;
  PUBLISHING = 5;
  COMPLETED = 6;
  FAILED = 7;
  CANCELLED = 8;
}

// Request/Response for RefreshLakes RPC
message RefreshLakesRequest {
  // Optional: specific path to scan for lakes
  // If empty, scans the entire workspace
  string path = 1;
}

message RefreshLakesResponse {
  // Number of lakes discovered
  int32 lakes_discovered = 1;
  
  // Number of bundles discovered across all lakes
  int32 bundles_discovered = 2;
  
  // List of discovered lake names
  repeated string lake_names = 3;
}
